#include "catch.hpp"

#include "tiny-00.hpp"

#include <sstream>
#include <utility>
#include <algorithm>

TEST_CASE("Basic", "[all]") {
    std::stringstream sstr;
    SECTION("Integral values need to be formatted properly") {
        write_stats({ 1, 2, 3, 4, 5 }, sstr);
        REQUIRE(sstr.str() == "min: 1.00\nmax: 5.00\nmean: 3.00\n");
    }
    SECTION("Small doubles are lost") {
        write_stats({ 0.00001, 0.00002, 0.00003, 0.00004, 0.00005 }, sstr);
        REQUIRE(sstr.str() == "min: 0.00\nmax: 0.00\nmean: 0.00\n");
    }
    SECTION("Large doubles have unnecessary precision") {
        write_stats({ 1'000'001, 1'000'002, 1'000'003, 1'000'004, 1'000'005 }, sstr);
        REQUIRE(sstr.str() == "min: 1000001.00\nmax: 1000005.00\nmean: 1000003.00\n");
    }
    SECTION("Random input") {
        write_stats({91.03, 20.76, 10.63, 74.73,  5.68,
                     24.55, 17.23, 72.42, 54.38, 75.38,
                     53.33, 43.11, 77.58, 89.91,  8.23 }, sstr);
        REQUIRE(sstr.str() == "min: 5.68\nmax: 91.03\nmean: 47.93\n");
    }
}

TEST_CASE("Boundary conditions", "[all]") {
    std::stringstream sstr;
    SECTION("Singular vector") {
        write_stats({ 1. }, sstr);
        REQUIRE(sstr.str() == "min: 1.00\nmax: 1.00\nmean: 1.00\n");
    }
    SECTION("Boundary values") {
        write_stats({std::numeric_limits<double>::max(),
                    -std::numeric_limits<double>::max() },
                    sstr);
        REQUIRE(sstr.str() == "min: -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00\nmax: 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00\nmean: 0.00\n");

        sstr.str("");
        write_stats({std::numeric_limits<double>::max(),
                     std::numeric_limits<double>::max() },
                    sstr);
        REQUIRE(sstr.str() == "min: 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00\nmax: 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00\nmean: inf\n");

        sstr.str("");
        write_stats({-std::numeric_limits<double>::max(),
                     -std::numeric_limits<double>::max() },
                    sstr);
        REQUIRE(sstr.str() == "min: -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00\nmax: -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.00\nmean: -inf\n");
    }
}
